/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import Model.Operation;
import Model.Bookscategory;
import com.itextpdf.text.Document;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.TreeMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.DataFormatter;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.hibernate.Criteria;
import org.hibernate.SQLQuery;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.criterion.Criterion;
import org.hibernate.criterion.DetachedCriteria;
import org.hibernate.criterion.Projections;
import org.hibernate.criterion.Restrictions;
import util.NewHibernateUtil;

/**
 *

 */
public class Reports extends javax.swing.JFrame {

    /**
     * Creates new form Reports
     */
      
    public Reports() {
        initComponents();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        cin = new javax.swing.JRadioButton();
        cout = new javax.swing.JRadioButton();
        fdate = new com.toedter.calendar.JDateChooser();
        todate = new com.toedter.calendar.JDateChooser();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        stable = new javax.swing.JTable();
        print = new javax.swing.JButton();
        expPDF = new javax.swing.JButton();
        expExcel = new javax.swing.JButton();
        Search = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        fbooks = new javax.swing.JComboBox();
        exit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        buttonGroup1.add(cin);
        cin.setText("Check in");

        buttonGroup1.add(cout);
        cout.setText("Check out");

        jLabel1.setText("From");

        jLabel2.setText("To");

        stable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Client ID", "Book NAme", "Author", "Status ", "Return Date"
            }
        ));
        jScrollPane1.setViewportView(stable);

        print.setText("Print");
        print.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printActionPerformed(evt);
            }
        });

        expPDF.setText("Export PDF");
        expPDF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                expPDFActionPerformed(evt);
            }
        });

        expExcel.setText("Export Excel");
        expExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                expExcelActionPerformed(evt);
            }
        });

        Search.setText("Search");
        Search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchActionPerformed(evt);
            }
        });

        jLabel3.setText("Search by book category");

        fbooks.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                fbooksMousePressed(evt);
            }
        });

        exit.setText("Exit");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGap(78, 78, 78)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(31, 31, 31)
                                .addComponent(fdate, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(43, 43, 43)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(todate, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(25, 25, 25)
                                .addComponent(fbooks, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cin)
                        .addGap(99, 99, 99)
                        .addComponent(cout)
                        .addGap(203, 203, 203)))
                .addGap(90, 90, 90))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(200, 200, 200)
                        .addComponent(Search, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(print, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(78, 78, 78)
                                .addComponent(expPDF, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(expExcel)
                                .addGap(72, 72, 72)
                                .addComponent(exit, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 629, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(28, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cin)
                            .addComponent(cout))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(33, 33, 33)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(fdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(todate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(fbooks, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(50, 50, 50)
                .addComponent(Search, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(54, 54, 54)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(print)
                    .addComponent(expPDF)
                    .addComponent(expExcel)
                    .addComponent(exit))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchActionPerformed
        // TODO add your handling code here:
        String stat=null; 
        Transaction tr = null;
       Session session = NewHibernateUtil.getSessionFactory().openSession();
       tr= session.beginTransaction();
        if(cin.isSelected())
        {
           stat="Check in";
           Criteria cr = session.createCriteria(Operation.class);
            cr.add(Restrictions.eq("status", stat));
           List res = cr.list();
   
       DefaultTableModel md = (DefaultTableModel) stable.getModel();
       md.setRowCount(0);
      Object[] row =new Object [5];
    for(Iterator i=res.iterator();i.hasNext();)
    {
        Operation opc= (Operation) i.next();
        row[0]=opc.getClientId();
        row[1]=opc.getBookName();
        row[2]=opc.getAuthor();
        row[3]=opc.getStatus();
        row[4]=opc.getReturnDate();
        md.addRow(row);
         
    }
    session.close();
        }
        else if (cout.isSelected())
        {
            stat="Check out";
             session = NewHibernateUtil.getSessionFactory().openSession();
             tr= session.beginTransaction();
           Criteria crOut = session.createCriteria(Operation.class);
           crOut.add(Restrictions.eq("status", stat));
           List res = crOut.list();
   
       DefaultTableModel mdOut = (DefaultTableModel) stable.getModel();
       mdOut.setRowCount(0);
      Object[] rows =new Object [5];
      for(Iterator j=res.iterator();j.hasNext();)
      {
        Operation op= (Operation) j.next();
        rows[0]=op.getClientId();
        rows[1]=op.getBookName();
        rows[2]=op.getAuthor();
        rows[3]=op.getStatus();
        rows[4]=op.getReturnDate();
        mdOut.addRow(rows);
         
      } 
      session.close();
        }
        else if(fdate.getDate()==null)
            
        {
            String id=null;
            int i=0;
            String rnm=null;
            String nm = fbooks.getSelectedItem().toString();
           session = NewHibernateUtil.getSessionFactory().openSession();
             tr= session.beginTransaction();
            Criteria Bct = session.createCriteria(Bookscategory.class);
            SQLQuery query = session.createSQLQuery("select CategoryId from BooksCategory where CategoryName=?");
            query.setParameter(0, nm);
            List temp = query.list();
            for(Object obj: temp)
            {
                id=obj.toString();
            }
            i =Integer.parseInt(id);
           //select bookname from cat where id =id
            SQLQuery query2 = session.createSQLQuery("select CategoryName  from BooksCategory where CategoryId =?");
            query2.setParameter(0, i);
            List temp2 = query.list();
            for(Object obj: temp2)
            {
                rnm=obj.toString();
            }
             Criteria crOut = session.createCriteria(Operation.class);
            crOut.add(Restrictions.ge("bookName", rnm));
            List temp3 = crOut.list();
             DefaultTableModel mdOut = (DefaultTableModel) stable.getModel();
            mdOut.setRowCount(0);
            Object[] rows =new Object [5];
             for(Iterator j=temp3.iterator();j.hasNext();)
                {
                     Operation op= (Operation) j.next();
                    rows[0]=op.getClientId();
                     rows[1]=op.getBookName();
                         rows[2]=op.getAuthor();
                     rows[3]=op.getStatus();
                         rows[4]=op.getReturnDate();
                        mdOut.addRow(rows);
         
                    } 
      session.close(); 
        }
        else
        {
            Date fdt = fdate.getDate();
            Date tdt= todate.getDate();
            session = NewHibernateUtil.getSessionFactory().openSession();
             tr= session.beginTransaction();
            Criteria crOut = session.createCriteria(Operation.class);
            crOut.add(Restrictions.ge("returnDate", fdt));
            crOut.add(Restrictions.le("returnDate", tdt));
            List res = crOut.list();
            DefaultTableModel mdOut = (DefaultTableModel) stable.getModel();
       mdOut.setRowCount(0);
      Object[] rows =new Object [5];
      for(Iterator j=res.iterator();j.hasNext();)
      {
        Operation op= (Operation) j.next();
        rows[0]=op.getClientId();
        rows[1]=op.getBookName();
        rows[2]=op.getAuthor();
        rows[3]=op.getStatus();
        rows[4]=op.getReturnDate();
        mdOut.addRow(rows);
         
      } 
      session.close();
        }
        
        
    }//GEN-LAST:event_SearchActionPerformed

    private void fbooksMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fbooksMousePressed
        // TODO add your handling code here:
        fbooks.removeAllItems();
        Transaction tr = null;
       Session session = NewHibernateUtil.getSessionFactory().openSession();
       tr= session.beginTransaction();
       SQLQuery query = session.createSQLQuery("select CategoryName from BooksCategory");
       List rs = query.list();
       for(Object cat : rs)
       {
          fbooks.addItem(cat);
       }
    }//GEN-LAST:event_fbooksMousePressed

    private void expPDFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_expPDFActionPerformed
        // TODO add your handling code here:
     DefaultTableModel mdOut = (DefaultTableModel) stable.getModel();
      Paragraph p=null;
         try{
             PdfPTable tb= new PdfPTable(5);
             PdfPCell c1 = new  PdfPCell(new Phrase("Client ID"));
             tb.addCell(c1);
              c1 = new  PdfPCell(new Phrase("Book Name"));
             tb.addCell(c1);
             c1 = new  PdfPCell(new Phrase("Author"));
             tb.addCell(c1);
              c1 = new  PdfPCell(new Phrase("Status"));
             tb.addCell(c1);
             c1 = new  PdfPCell(new Phrase("Return date"));
             tb.addCell(c1);
             tb.setHeaderRows(1);
             
            String file ="C:\\Users\\USER\\Desktop\\Hibernate\\report.pdf" ;
            Document doc = new Document();
            PdfWriter.getInstance(doc, new FileOutputStream(file));
            doc.open();
            for(int i=0; i<mdOut.getRowCount();i++)
          {
              
              for(int j=0;j<mdOut.getColumnCount();j++)
              {
                 tb.addCell(mdOut.getValueAt(i, j).toString()+"\t");
                 
                
                 
                 
              }
          
          }
            doc.add(tb);
            doc.close();
            JOptionPane.showMessageDialog(null, "PDF created");
        }catch(Exception e)
        {
            
        }
        
    }//GEN-LAST:event_expPDFActionPerformed

    private void expExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_expExcelActionPerformed
        // TODO add your handling code here:
       
         FileOutputStream excelFout =null;
            BufferedOutputStream excelBout = null;
            XSSFWorkbook excelJTableExporter=null;
        JFileChooser excelFileChooser= new JFileChooser();
        excelFileChooser.setDialogTitle("Save As");
        FileNameExtensionFilter fnef= new FileNameExtensionFilter("EXCEL FILES","xls","xlsx","xlsm");
        excelFileChooser.setFileFilter(fnef);
        excelFileChooser.showSaveDialog(null);
        int excelChooser = excelFileChooser.showSaveDialog(null);
        if(excelChooser == JFileChooser.APPROVE_OPTION){
            
            try { 
                 excelJTableExporter =new XSSFWorkbook();
                XSSFSheet excelSheet =excelJTableExporter.createSheet("JTable Sheet");
                for(int i =0; i<stable.getRowCount();i++){
                    XSSFRow excelRow = excelSheet.createRow(i);
                    for( int j =0; j<stable.getColumnCount();j++){
                        XSSFCell excelCell = excelRow.createCell(j);
                        excelCell.setCellValue(stable.getValueAt(i, j).toString());
                    }
                }   
                excelFout = new FileOutputStream(excelFileChooser.getSelectedFile() + ".xlsx");
                excelBout = new BufferedOutputStream(excelFout);
                excelJTableExporter.write(excelBout);
                JOptionPane.showMessageDialog(null, "Done!!");
            } catch (FileNotFoundException ex) {
                ex.printStackTrace();
            } catch (IOException ex) {
                Logger.getLogger(Operation.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                try {
                    if (excelBout!=null) {
                        excelBout.close();
                    }
                     
                    if (excelFout!=null) {
                        excelFout.close();
                    }
                    
                    if (excelJTableExporter!=null) {
                        excelJTableExporter.close();
                    } 
                    
                } catch (IOException ex) {
                    ex.printStackTrace();
                }
            }
            
        }                
                
        
        
            
         
    }//GEN-LAST:event_expExcelActionPerformed

    private void printActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printActionPerformed
        // TODO add your handling code here:
        try{
            stable.print(JTable.PrintMode.NORMAL);
            
        }catch(Exception e)
        {
            
        }
    }//GEN-LAST:event_printActionPerformed

    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        // TODO add your handling code here:
        Reports v = new Reports();
        this.setVisible(false);
    }//GEN-LAST:event_exitActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Reports.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Reports.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Reports.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Reports.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Reports().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Search;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JRadioButton cin;
    private javax.swing.JRadioButton cout;
    private javax.swing.JButton exit;
    private javax.swing.JButton expExcel;
    private javax.swing.JButton expPDF;
    private javax.swing.JComboBox fbooks;
    private com.toedter.calendar.JDateChooser fdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton print;
    private javax.swing.JTable stable;
    private com.toedter.calendar.JDateChooser todate;
    // End of variables declaration//GEN-END:variables
}
